#!/usr/Local/PyTangoRoot/bin/python
import numpy as npy
import sys
import os
#import pylab
import glob
import Gnuplot

#print sys.argv

#fluo channels to skip (name of them)
fout=[]
if "-fout" in sys.argv:
    fout_i = sys.argv.index("-fout")
    for j in sys.argv[fout_i+1:-1]:
        if j.startswith("-"):
            break
        else:
            fout.append(int(j))
#print fout


infiles = []
for i in range(1, len(sys.argv)):
    infiles += glob.glob(sys.argv[i])

for infile in infiles:
    if infile.endswith("_cor.dat"):
        infiles.remove(infile)

for infile in infiles:
    try:
        print "Raw data from: %s" % (infile)
        if infile.endswith("_raw.txt"):
            outfile = infile[:-8] + "_cor.dat"
        elif infile.endswith(".txt"):
            outfile =  infile[:-4] + "_cor.dat"
        else:
            outfile =  infile + "_cor.dat"
        
        pos={}
        
        myfile = file(infile,'r')
        ll = myfile.readlines()
        myfile.close()
        
        header = []
        try:
            header = ll[ll.index("#HEADER\n") + 1][1:].split()
        except:
            print "File format unrecognized, skipping"
        if len(header) >= 0:
            matx = npy.loadtxt(infile).transpose()
            motor = matx[0]
            if "I0" in header:
                I0 = matx[header.index("I0")]
                if "I1" in header:
                    I1 = matx[header.index("I1")]
                else:
                    I1 = npy.ones(len(I0)) * 0.9999
                if "I2" in header:
                    I2 = matx[header.index("I2")]
                else:
                    I2 = npy.ones(len(I0)) * 1.0001
            elif "I00" in header:
                I0 = matx[header.index("I00")]
                I1 = npy.ones(len(I0))
                I2 = npy.ones(len(I0))
            else:
                raise Exception ("Cannot recognize this HEADER")
            #Clock = matx[header.index("Clock")]
            try:
                Time = matx[header.index("TimeFromEpoch")]
            except:
                Time = -1
            
            rois=[]
            icrs=[]
            ocrs=[]
            for i in range(len(header)):
                if header[i].startswith("roi_"):
                    rois.append(i)
                if header[i].startswith("icr_"):
                    icrs.append(i)
                if header[i].startswith("ocr_"):
                    ocrs.append(i)
            #print len(rois)
            #print rois
            #print len(icrs)
            #print icrs

            if npy.prod(I1) == 0. or npy.nan in npy.log(I0/I1):
                mux = I0 * 0.
            else:
                mux = npy.log(I0 / I1)
                
            if npy.prod(I2) == 0. or npy.nan in npy.log(I1/I2):
                mus = I0 * 0.
            else:
                mus = npy.log(I1 / I2)
            
            muf = matx[rois[0]] * 0.
            muf_cor =  matx[rois[0]] * 0.
            for i in range(0, len(rois)):
                if i not in fout:
                    muf += matx[rois[i]]
                    if not(0 in matx[ocrs[i]]):    
                        muf_cor += matx[rois[i]] * matx[icrs[i]] / matx[ocrs[i]]
            
            muf = muf / I0
            muf_cor = muf_cor / I0 
            
            if "-show" in sys.argv:
                if len(infiles) > 1:
                    print "-show is never active for more than one file!"
                else:
                    nchannels = len(rois)
                    wg1=Gnuplot.Gnuplot(persist = 0)
                    wg1("set multi; set style data lines; set key bottom right")
                    wg1("set size 1,0.5")
                    wg1("set origin 0,0")
                    wg1("set label 99 '%s' at screen 0.2,0.01" % (infile))
                    wg1.plot(Gnuplot.Data(motor, muf, title="mu_fluo",with_="l 1 2"),\
                    Gnuplot.Data(motor, muf_cor, title="mu_Fluo_cor",with_="l 3 2"))
                    wg1("set origin 0,0.5")
                    #wg1("set title %s" % ('"' + infile + " MUX  "+'"'))
                    wg1.plot(Gnuplot.Data(motor, mux, title="mux", with_="l 1 2"))
                    wg1("unset multi")
                    nrows = nchannels / 4
                    if npy.mod(nchannels, 4):
                        nrows += 1
                    wg2=Gnuplot.Gnuplot(persist = 0)
                    #wg2("set title %s" % ('"' + infile + " ROI/I0 & ROI/I0*ICR/OCR "+'"'))
                    wg2("set size 0.25, %3.2f" % (1./nrows))
                    wg2("set style data lines;set format y ''; set format x ''")
                    wg2("set multi")
                    wg2("set label 99 '%s' at screen 0.2,0.01" % (infile))
                    for i in range(nrows):
                        j = 0
                        while(j < 4 and (j + 1) * (i + 1) <= nchannels):
                            wg2("set label 1 %s at graph 0.1, graph 0.9" % ("'" + "ROI_%02i/I0" % (i * 4  + j) + "'") )
                            wg2("set origin %3.2f,%3.2f" % (j * 0.25, 1.- (i+1) * 1. / nrows))
                            wg2.plot(Gnuplot.Data(motor, matx[ocrs[i * 4 + j]]/I0, with_="l 1 2"),\
                            Gnuplot.Data(motor, matx[ocrs[i * 4 + j]] / I0 * matx[icrs[i * 4 + j]] / matx[ocrs[i * 4 + j]], with_="l 3 2"))
                            j += 1
                        pass
                    wg2("unset multi")
                   
                    wg3=Gnuplot.Gnuplot(persist = 0)
                    #wg3("set title %s" % ('"' + infile + " ICR/I0  "+'"'))
                    wg3("set size 0.25, %3.2f" % (1./nrows))
                    wg3("set style data lines;set format y ''; set format x ''")
                    wg3("set label 99 '%s' at screen 0.2,0.01" % (infile))
                    wg3("set multi")
                    for i in range(nrows):
                        j = 0
                        while(j < 4 and (j + 1) * (i + 1) <= nchannels):
                            wg3("set label 1 %s at graph 0.1, graph 0.9" % ("'" + "ICR_%02i/I0" % (i * 4  + j) + "'") )
                            wg3("set origin %3.2f,%3.2f" % (j * 0.25, 1.- (i+1) * 1. / nrows))
                            wg3.plot(Gnuplot.Data(motor, matx[icrs[i * 4 + j]],with_="l 1 2"))
                            j += 1
                        pass
                    wg3("unset multi")

                    print "\n"*6 + "Type RETURN when done...\n\n"
                    try:
                        __tmp=input()
                    except:
                        pass
                    
            #pylab.figure()
            #pylab.plot(motor, muf_cor)
            #pylab.show()
            ot = file(outfile, "w")
            ot.write("#1)Energy\n#2)mux=ln(I0/I1)\n#3)muf = Sum(ROI)/I0\n#4)muf_cor = Sum(ROI/OCR*ICR)/I0\n#5)mus=ln(I1/I2)\n")
            ot.write("#6)I0\n#7)I1\n#8)I2\n")
            ot.write("#HEADER\n")
            ot.write("#%s\tmux\tmuf\tmuf_cor\tmus\tI0\tI1\tI2\n" % header[0])
            fmt='%.18e\t' * 7 + '%.18e\n'
            for i in range(len(motor)):
                ot.write(fmt % (motor[i], mux[i], muf[i], muf_cor[i], mus[i], I0[i], I1[i], I2[i]))
            ot.close()
            print "\tData saved in %s" % (outfile)
    except Exception, tmp:
        print tmp
        print "Error dealing with file: ",infile
        print "Skipping."
        pass
